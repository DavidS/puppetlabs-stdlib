# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# ensure_packages.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Takes a list of packages and only installs them if they don't already exist.
#
#    It optionally takes a hash as a second parameter that will be passed as the
#    third argument to the ensure_resource() function.
#
#    @return
#      install the passed packages
#
#
Puppet::Functions.create_function(:'stdlib::ensure_packages') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    param 'Variant[Hash, Array[String], String]', :packages
    optional_param 'Hash', :defaults
  end

  def default_impl(packages, defaults = {})
    if defaults
      defaults = { 'ensure' => 'present' }.merge(defaults)
      if defaults['ensure'] == 'installed'
        defaults['ensure'] = 'present'
      end
    else
      defaults = { 'ensure' => 'present' }
    end

    if packages.is_a?(Hash)
      call_function('stdlib::ensure_resources', 'package', packages.dup, defaults)
    else
      Array(packages).each do |package_name|
        raise(Puppet::ParseError, 'ensure_packages(): Empty String provided for package name') if package_name.empty?
        call_function('stdlib::ensure_resource', 'package', package_name, defaults)
      end
    end
  end
end
