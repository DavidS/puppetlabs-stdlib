# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# convert_base.rb
#
# ---- original file header ----
#
# @summary
#       @summary
#      Converts a given integer or base 10 string representing an integer to a
#      specified base, as a string.
#
#    @return
#      converted value as a string
#
#    @example Example usage
#
#    convert_base(5, 2)` results in: `'101'`
#    convert_base('254', '16')` results in: `'fe'`
#
#    > *Note:*
#      Since Puppet 4.5.0 this can be done with the built-in
#      [`String.new`](https://puppet.com/docs/puppet/latest/function.html#integer-to-string)
#      function and its many formatting options:
#
#      `$binary_repr = String(5, '%b')` return `"101"`
#      `$hex_repr = String(254, "%x")`  return `"fe"`
#      `$hex_repr = String(254, "%#x")` return `"0xfe"`
#
#      @return [String] The converted value as a String
#
#
Puppet::Functions.create_function(:'stdlib::convert_base') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    param 'Variant[Integer, String]', :number_to_convert
    param 'Variant[Integer, String]', :new_base
  end

  def default_impl(number_to_convert, new_base)
    if number_to_convert.is_a?(String)
      raise Puppet::ParseError, 'convert_base(): First argument must be an integer or a string corresponding to an integer in base 10' unless number_to_convert =~ %r{^[0-9]+$}
    end

    if new_base.is_a?(String)
      raise Puppet::ParseError, 'convert_base(): First argument must be an integer or a string corresponding to an integer in base 10' unless new_base =~ %r{^[0-9]+$}
    end

    number_to_convert = number_to_convert.to_i
    new_base = new_base.to_i

    raise Puppet::ParseError, 'convert_base(): base must be at least 2 and must not be greater than 36' unless new_base >= 2 && new_base <= 36

    number_to_convert.to_s(new_base)
  end
end
